hiroyuki_iijima

followup評価
いろいろなビルトインメソッドを使うなど、学習したことがうかがわれる。
テスト関数を呼びだすコードをコメント化してしまっており、TDDの理解不足。
関数がいつ実行されるのかを理解できていない。
リファクタリングの余地あり。

・コードスタイル整っている
・テスト結果をコメントアウトしてしまっている
・変数へ代入しているのが関数なのか実行結果なのかを理解できていない
・返す値の意味は理解できているが、リファクタリングの余地あり


followup assessmentお疲れさまでした！😊

すべての問題で、どのような値を返すべきか？ しっかりと理解されています。
また、変数名を含むコードスタイルが整っていて、読みやすいコードになっています👏

しかし、せっかく書いてくださったテスト関数を呼び出すコードがコメントアウトされています😥
たぶん問題に記述されていた関数を呼び出すコードを尊重されたのかと思いますが、
TDDの手法とし考えた場合に、いかがでしょうか？
テスト関数を呼びだすコードの方を生かしておいていただきたかったです。

1問目は、Number.isInteger()メソッドを使用して整数であるか否かの判断を行なったんですね！
それに対するテストも記述されているのは非常に良いです！👏
ただし isEvenという boolean値を === true のような形で条件分岐されています。
boolean値ってどのような値でしたっけ？
この値と配列のビルトインメソッドを使えば、さらに簡潔に返すようリファクタリングすることができそうです💪

他の問題に関しても、
Objectクラスのメソッドを使用したらどうか？
配列やオブジェクトを用意しておいてはどうか？
などと、リファクタリングすることができないか考えてみることもお勧めします💪

5問目は、fooや barに代入されているのは、関数でしょうか？関数が返す値でしょうか？🤔
関数はいつ実行されるでしょうか？
それを踏まえるとまた説明が変わってくると思います。

6問目の changeColorは、16進数の値をカラーコードに変換されたんですか！😮
なかなか思いつきませんね！
ボタンの補色化も素晴らしいです！👏

基礎コースで取り上げていない Numberや Arrayクラスのメソッドを使用するなど、
フォローアップ期間も自習をされてスキルアップされたことが伺えます💪
今後も学習を続けられて、hiroyukiさんのスキルレベルが更に向上することを期待しています！😊


masaharu_takeda

followup評価
いろいろなビルトインメソッドを使うなど、学習したことがうかがわれる。
関数がいつ実行されるのかを理解できていない。
いくつかの問題でテストが足りていない。
リファクタリングの余地あり。

・コードスタイル整っている
・Object、Arrayクラスのビルトインメソッド使用
・変数へ代入しているのが関数なのか実行結果なのかを理解できていない
・いくつかの問題でテストが足りていない
・返す値の意味は理解できているが、リファクタリングの余地あり


followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
おめでとうございます！😊

コードスタイルも概ね見やすくなっていますが、仮引数間や else前後などにスペースがあればさらに良いですね。
その他、若干気になるところを以下に記します。

1問目：
boolという boolean値を === true のような形で条件分岐されています。
boolean値ってどのような値でしたっけ？🤔
この値と配列のビルトインメソッドを使えば、さらに簡潔に返すようリファクタリングすることができそうです💪

2問目：
Objectクラスの keysメソッドで、キー名の配列を取得するようにされたんですね！😮
素晴らしいですね！👏
こうすることにより配列のビルトインメソッドを使うことができますね！
関数内を 1行とするリファクタリングに挑戦してみてください！💪

4問目：
変数 sumの役割は何だったでしょうか？🤔

5問目：
fooや barに代入されているのは、関数でしょうか？関数が返す値でしょうか？🤔
関数はいつ実行されるでしょうか？
それを踏まえるとまた説明が変わってくると思います。

6問目：
ボタンの大きさや色も変化するようにしていただいたんですね！😮
フォントサイズに合わせたボタンの大きさにするという発想は素晴らしいです！
すべての機能をひとつの関数内で行なうことなく、機能分けされているところも非常に良いです👏
変数名はスコープを考えていただくことと、再代入が必要か否かも考慮されるともっと良いです。

8問目：
引数は「奇数個の単語からなる文字列(スペースで区切られる)」とあります。
test(changeMiddle("red green blue white gray", "yellow"), "red green yellow white gray");

9問目：
以下のテストも実行してみてください。
test(countSomething(["a", "b", "c", 1, 0, 1, false, 1]),"NUMBER COUNT: 4");
TDDのテストは非常に重要ですね。

テストはパスしており、実装の方法はさまざまなやり方があると思うのですが、
上記を参考にされてリファクタリングを行なってみてください

基礎コースで取り上げていない Objectや Arrayクラスのメソッドを使用するなど、
フォローアップ期間も自習をされてスキルアップされたことが伺えます💪
今後も学習を続けられて、masaharuさんのスキルレベルが更に向上することを期待しています！😊


akihiro_kaneko

followup評価
追加のテストをしっかりと行ない確認している。
関数がいつ実行されるのかを理解できていない。
リファクタリングの余地あり。

・テスト全問パス
・追加のテストを行ない確かめている
・変数へ代入しているのが関数なのか実行結果なのかを理解できていない
・返す値の意味は理解できているが、リファクタリングの余地あり
・6問目を同じファイル内に記述


followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
おめでとうございます！😊

すべての問題で、どのような値を返すべきか？ しっかりと理解されています。
テストを追加されているのも非常に良いですね👏

若干気になるところを含めて以下に記します。

1問目：
Math.abs()で絶対値にされたんですね！😮
ですが、for of loopで使用する変数を letで宣言されています。これは何か理由がありましたっけ？
また、booleanという boolean値を === true のような形で条件分岐されています。
boolean値ってどのような値でしたっけ？🤔
この値と配列のビルトインメソッドを使えば、さらに簡潔に返すようリファクタリングすることができそうです💪

5問目：
説明は概ね正しいですが、fooに代入されるのは関数でしょうか？関数を呼び出した結果帰ってくる値でしょうか？🤔
それを踏まえるとまた説明が変わってくると思います。

6問目：
ボタンの色も変更して色の値も表示されるんですね！😮
「決して押さないで！」と言われるとどうしても押したくなっちゃいますね！😁
setTimeout()も非常に良いです。

7問目：
単なる勘違いだと思いますが、引数 actionが使われていません。
これではコールバック関数にならないですね😢

9問目：
同率だった場合のことも考えていただいたんですね！😮
ただ、多くの条件分岐をされていますが、配列やオブジェクトを用意しておくなど、
いろいろなやり方でリファクタリングできそうですね。

基礎コースで取り上げていない Arrayクラスのメソッドや setTimeoutメソッドを使用するなど、
フォローアップ期間も自習をされてスキルアップされたことが伺えます💪
今後も学習を続けられて、akihiroさんのスキルレベルが更に向上することを期待しています！😊


hiroshi inagaki

followup評価
基本に忠実なきれいなコードを書くことができている。
すべての関数に JSDocを追記している。
リファクタリングの余地はあり。

・テスト全問パス
・すべてに JSDocを追記している
・テストを追記している
・コードスタイル整っている
・リファクタリングの余地あり


followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
おめでとうございます！😊

すべての問題で、どのような値を返すべきか？ しっかりと理解されています。
また、すべての関数に JSDocを追記されたんですね！
非常に良いです！（@paramの変数名は、注記の前に記すと良いです）

コードスタイルも整っていて非常に見やすいコードになっています👏
この部分で指摘するところはありませんね！😊

若干気になるところを含めて以下に記します。

1問目：
ここまでできれば条件分岐をせずに、booleanと num % 2 === 0を直接比較することもできそうですね！

5問目：
正しく説明できています。
ただし、「戻り値が無い」のではなく、undefinedが戻り値であることにご注意ください。

6問目：
ボタンの color変更や、クリック回数や変更した背景色の履歴表示まで行なうようにしていただいたんですね！😮
素晴らしいです！👏

非常にレベルの高いコードですね。
チャレンジとして、他の問題に関しても、
配列やObjectクラスのメソッドを使用したらどうか？
などと、リファクタリングすることができないか考えてみることもお勧めします💪

フォローアップ期間も自習をされてスキルアップされたことが伺えます💪
今後も学習を続けられて、hiroshiさんのスキルレベルが更に向上することを期待しています！😊


yudai_maruyama

followup評価
すべての関数に JSDocを追記している。
テストを追記して関数の返す結果を確認することができている。
リファクタリングの余地はあり。

・テスト全問パス
・すべてに JSDocを追記している
・テストを追記している
・リファクタリングの余地あり

followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
おめでとうございます！😊

すべての問題で、どのような値を返すべきか？ しっかりと理解されています。
また、すべての関数に JSDocを追記されたんですね！
非常に良いです！（@paramの注記の前に、変数名を記すとさらに良いです）

コードスタイルも整っていて非常に見やすいコードになっています
テストを追加して確認されているのも、TDDの手法に則っていますね

若干気になるところを含めて以下に記します。

1問目：
アロー関数や .filterを使っているのは非常に良いですね😊
ですが、booleanという boolean値を === true のような形で条件分岐されています。
boolean値ってどのような値でしたっけ？🤔
この値と、配列の要素が偶数であるか？の値を直接比較すれば、条件分岐をせずにさらに簡潔に書くことができそうです💪

5問目：
正しく説明できています。
ただし、「戻り値がない」のではなく、undefinedが戻り値であることにご注意ください。

6問目：
ボタンの大きさと innerTextも変更されるんですね！
…こちらこそありがとうございます。
yudaiさんのリアクションにはいつも助けられました😊

9問目：
typeof演算子が返す値を要素に持った配列を宣言して使っているんですね！😮
素晴らしいです！
もう一歩、オブジェクトなんかを組み合わせると、resultTypeの条件分岐も不要になるかもしれませんね！

フォローアップ期間も自習をされてスキルアップされたことが伺えます💪
今後も学習を続けられて、yudaiさんのスキルレベルが更に向上することを期待しています！😊



